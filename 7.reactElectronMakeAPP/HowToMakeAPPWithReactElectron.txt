## Electron에서 React를 사용했을때 앱을 만드는 방법

이전 6.까지 진행하였을때 React를 사용한 Electron에서 npm run start 까지는 잘되었을 것이다.
단, npm run make 하였을 때는 아마 아무것도 불러오지 못하는 껍데기 앱만 생성이 되었을 것이다.

이유는 React가 Build 된 후에 그 build된 파일을 Electron이 로드해야하기 때문이다. 
하지만 그냥 npm run make 하게되면 build된 React파일을 로드하지 못해서 빈 껍데기 앱이 생성되는것이다.

때문에 react를 build하여 정적 파일은 build 폴더를 만들고 그 폴더를 감지하여 electron이 run make 해야한다.

그렇게 하려면 2 + 1가지 단계로 make가 수행되야한다. 
    0) 이미 만들어진 build 폴더가 있다면 제거한다 
        => 이유는 이전 버전의 build 폴더가 있다면 해당 폴더를 감지하고 make 수행할 거기 때문
    
    1) React를 Build하여 build 폴더를 만든다
        
    2) build폴더를 감지하게 되면 그때 run make를 수행한다.

위 동작은 병렬이아닌 순차적으로 수행되어야하기 때문에 ' wait-on ' 패키지가 필요하고
또한, 이미 build 폴더가 있다면 해당 build 폴더를제거 후 다시 만들어야하기떄문에 ' rimraf ' 패키지가 필요하다.

위의 과정을 위해 아래와같은 작업이 필요하다.

1. npm install rimraf --save-dev
    => rimraf 를 개발환경에서 설치한다.

2. package.json을 다음과같이 바꿔준다 
    {
        "name": "7.reactElectronMakeAPP",
        "version": "0.1.0",
        "private": true,
        "dependencies": {
            "cra-template": "1.2.0",
            "electron-squirrel-startup": "^1.0.1",
            "react": "^19.0.0",
            "react-dom": "^19.0.0",
            "react-scripts": "5.0.1"
        },
        "productName": "7.reactElectronMakeAPP",
        "author": "NLNL4358",
        "main": "src/main.js",
        "description": " Electron을 이용한 리액트 앱을 Build하기 ",
        "homepage": "./",           // 중요! 빌드된 React는 이걸 안해주면 경로를 찾을 수 없다!
        "scripts": {                // npm run make를 하게되면 2+1 가지 단계를 수행한다.
            "start": "concurrently \"npm run react:start\" \"npm run electron\" ",
            "react:start": "react-scripts start",
            "clean": "rimraf build",
            "build": "npm run clean && react-scripts build",
            "test": "react-scripts test",
            "eject": "react-scripts eject",
            "electron": "wait-on http://127.0.0.1:3000 && electron-forge start",
            "package": "electron-forge package",
            "make": "npm run build && electron-forge make"
        },
        ...
    }

3. main.js에서 createWindow를 다음과 같이 바꿔준다.
    const createWindow = () => {
        window = new BrowserWindow({
            width: 900,
            height: 600,
            webPreferences: {
                preload: path.join(__dirname, 'preload.js'), // preload.js 파일 경로
                nodeIntegration: false, // IPC 사용위해서는 false
                contextIsolation: true, // IPC 사용하기위해서 true 필요
            },
            autoHideMenuBar: true,
        });
        const startURL = app.isPackaged
            ? `file://${path.join(__dirname, '../build/index.html')}` // 패키징된 경우 React 빌드 파일 로드
            : // => make로 만든경우 __dirname에는 resources/app 이 올거다 때문에 resources/app/build/index.html 이 열릴것이다.
            'http://localhost:3000'; // 개발 모드에서 React 개발 서버 로드

        window.loadURL(startURL);
    };

    요약하면 app.isPackaged는 패키징된 즉, 빌드된 앱일때는 위의 경로를 이용해 index.html을 찾고
    개발환경일때는 localhost에서 찾는다 라는 뜻이다.
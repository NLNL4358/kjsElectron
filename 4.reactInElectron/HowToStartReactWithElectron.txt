1. 터미널에서 'npx create-react-app 폴더명' 을 이용해 리액트를 먼저 만들어준다

2. 터미널 경로를 생성된 리액트 폴더로 이동한다. 'cd 폴더명'

3. 이동된 터미널에서 'npm start' 를 이용해 프로젝트가 잘 실행되는지 확인한다.

4. index.js 에서 불필요한 코드를 지워준다
    import React from 'react';
    import ReactDOM from 'react-dom/client';
    import './index.css';
    import App from './App';

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
      <App />
    );

5. 이제 터미널에서 프로젝트에 필요한 Electron을 추가한다.
    electron 패키지는 개발시에만 필요함으로 'npm i -D electron' 를 이용해 electron을 설치한다.

6. package.json으로 이동하여 electron 관련 설정을 추가한다.
    ● "main": "src/main.js" --> 일렉트론의 entry point를 main.js로 설정
    ● "electron": "electron ." --> 일렉트론 실행 스크립트

    {
        "name": "react-electron",
        "version": "0.1.0",
        "private": true,
        "dependencies": {
          "cra-template": "1.2.0",
          "react": "^19.0.0",
          "react-dom": "^19.0.0",
          "react-scripts": "5.0.1"
        },
        "main" : "src/main.js",         << 추가
        "scripts": {
          "electron" : "electron .",    << 추가
          "start": "react-scripts start",
          "build": "react-scripts build",
          "test": "react-scripts test",
          "eject": "react-scripts eject"
        },
        ...

7. package.json에 선언한대로 일렉트론의 entry point인 src/main.js 를 만들어 준다.

8. main.js는 앞서 해왔던 프로젝트들의 main.js와 다르게 react를 사용하기에 main.js는 다음과같이 만들어준다.
    a. path를 require로 받아온다. 
    b. BrowserWindow를 생성할때 webPreferences를 같이 선언해준다.
        webPreferences: {
            nodeIntegration: true,
            contextIsolation: false,
        }
    c. window.loadFile()이 아닌 loadURL을 사용한다.

9. Electron 과 React를 같이 실행하기위해 2가지 패키지를 추가한다.
    1) npm i -D concurrently     << 일렉트론과 리액트 프로세스를 동시에 실행하기 위해 사용
    2) npm i -D wait-on          << 프로세스 동시 수행시 한개의 프로세스가 완료되기를 기다리다 완료된 후 다음 프로세스를 수행하게 만들어 준다.

10. package.json에서 "start"와 "electron" 를 변형해준다.
    1) concurrently 사용 - start 스크립트 수행시 concurrently를 이용해 react와 electron을 같이 시작하게 합니다.
    2) wait-on 사용 - electron 스크립트는 react가 완료되길 기다린 후 실행하게 합니다.

    이를 이용해 아래와같이 적어줍니다.

   "scripts": {
        "start": "concurrently \"npm run react:start\" \"npm run electron\" ",
        "react:start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject",
        "electron": "wait-on http://127.0.0.1:3000 && electron ."
    },

    ** 이때 electron : wait-on http://localhost:3000 << 이렇게 localhost를 쓰면 인식을 못하길래 127.0.0.1 을 사용했다.

11. npm start 로 프로젝트를 실행하면 localhost:3000에 리액트 웹이 띄워지고 그 후 electron이 실행됨을 볼 수 있다.

12. electron만을 확인하고 싶다면... 즉, 웹은 굳이 볼 필요가 없다면 
    루트폴더에 .env파일을 만들고, 아래의 내용을 추가한다.

    BROWSER=none

    -> 이후 npm start 하면 웹 브라우저는 굳이 띄우지않고 electron앱만 실행됨을 볼 수 있다.

13. 확인을 위해 App.js 에서 변경을 해보자
    <p>
      Edit <code>src/App.js</code> and save to reload.
    </p>

    이 node를 아래와 같이 변경 후 저장해보자

    <p>
      Hello React-Electron
    </p>

    Electron 앱에서 내용이 변경됨을 볼 수 있다.